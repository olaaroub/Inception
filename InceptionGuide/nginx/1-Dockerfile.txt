________________________________________________________________________________

[subject : •    For performance matters,
				the containers must be built either from the penultimate stable
				version of Alpine or Debian. The choice is yours.
________________________________________________________________________________

> Step 1:	Choosing the Base Image
			The first step is to set up the base image, based on the subject requirements.
			To do this, we use the FROM instruction to pull the specified base image from Docker Hub.
			the base image (debian:bullseye) is the starting point for our container.
			It’s a minimal operating system layer that contains just enough software to run nginx.


In our case, we'll use Debian Bullseye (the penultimate stable version of Debian)

---------dockerfile--------------

FROM	debian:bullseye
_________________________________

__________________________________________________________________________________

[subject :	• You then have to set up:
			 A Docker container that contains NGINX with TLSv1.2 or TLSv1.3 only.
___________________________________________________________________________________

> Step 2: Update apt and install nginx && openssl
		Of course, we need to install the nginx software.
		Then install OpenSSL. (For more details about SSL, go to nginx/3-SSL.txt)

------------------dockerfile--------------------
|
|	...
|
|	RUN		apt update -y && \
|			apt install  -y nginx openssl && \
|			mkdir -p /etc/nginx/ssl
|________________________________________________

> Step 3:  generate the certificate
		we use this command to creates a self-signed SSL certificate using openssl,
		This certificate is used to enable HTTPS (secure connection) in our Nginx server.

------------ >  details for this command :

1) openssl req -x509                    : generate a self-signed certificate (not from a trusted authority).
2) -nodes                               : means no password will be set for the private key (needed for Nginx to start without asking for a password)
										  [lilmo3a9in](madam had l command kayna f dockerfile ila madernach -nodes fach ikon docker kaydir build l image 
										  ghadi tle3 lih khasek dir password o maghadich i9der howa idir lik password dakchi 3lach ghadi ytle3 error).
3) -keyout /etc/nginx/ssl/inception.key : where to save the private key file.
4) -out /etc/nginx/ssl/inception.crt    : where to save the certificate file that is shared with users to prove the server's identity.
5) -subj "..."                          : contains the information that goes into the certificate:

				C=MA              : Country = Maroc
				ST=BG             : State = Benguerir
				L=1337		      : Location (can be any name)
				O=42  		      : Organization name
				OU=42 		      : Organizational unit
				CN=UserName.42.fr : Common Name = domain name
				UID=UserName      : User ID

|-------------------dockerfile------------------------------------------------------
|	
|	...
|
|	RUN 	openssl req -x509 -nodes \
|			-keyout /etc/nginx/ssl/inception.key \
|			-out /etc/nginx/ssl/inception.crt \
|			-subj "/C=FR/ST=IDF/L=1337/O=42/OU=42/CN=UserName.42.fr/UID=UserName"
|___________________________________________________________________________________


> Step 4: 	copy the config file from our local build context into the Docker image.

	We use this command to replace the default Nginx config with our config,
	but firstly we must create our nginx config file.
	We do this by getting the default one from online, then modifying it.
	For the details, go to : nginx/2-Config_File.txt

|-------------------dockerfile------------------------------------------------------
|	
|	...
|
|	COPY	conf/nginx.conf /etc/nginx/nginx.conf
|___________________________________________________________________________________

________________________________________________________________________________

[subject : •    Read about PID 1 and the best practices for writing Dockerfiles.
________________________________________________________________________________

For more details about PID1, go to : nginx/PID1.txt

> Step 5:  run nginx in the foreground

		// HEZZ hadchi lli ta7ti w 7attou f PID1
		This is the command  It runs the nginx web server with the following option:
		-g "daemon off;"
		This tells nginx:
			👉 “Don’t run in the background (daemon mode), stay in the foreground.”
		You're basically telling Docker:
			“Run nginx as the main process (PID 1), and don’t fork into the background, stay running in the foreground.”
		If nginx runs in the background (default behavior), the main process (PID 1) exits, and Docker sees that as:
			"The container finished its job" → shut it down.

|-------------------dockerfile------------------------------------------------------
|	
|	...
|
|	CMD		["nginx", "-g", "daemon off;"]
|___________________________________________________________________________________
